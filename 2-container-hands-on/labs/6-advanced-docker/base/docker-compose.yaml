services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    depends_on:
      - backend
    networks:
      - frontend-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # ports:
    #   - "3001:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://todouser:todopass@database:5432/todoapp
      JWT_SECRET: your-secret-key-here
      PORT: 3000
    depends_on:
      database:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  database:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: todoapp
      POSTGRES_USER: todouser
      POSTGRES_PASSWORD: todopass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - /tmp/init.sql:/docker-entrypoint-initdb.d/init.sql:ro # Workaround for MacOS
      # - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U todouser -d todoapp"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
